- name: configuring HAproxy loadbalancer
  hosts: main_proxy standby_proxy devservers
  gather_facts: true
  pre_tasks:
    - name: Gather facts from all hosts
      setup:
      delegate_facts: true

- name: configuring HAproxy loadbalancer
  hosts: main_proxy standby_proxy
  become: true
  tasks:
    - name: Installing HAproxy
      apt:
        name: haproxy
        state: present
        update_cache: true
        
    - name: Installing keepalived
      apt:
        name: keepalived
        state: present
        update_cache: true

    - name: Enable keepalived service
      systemd:
        name: keepalived
        enabled: true

    - name: sudo sysctl -w net.ipv4.ip_nonlocal_bind=1
      become: true
      shell: sysctl -w net.ipv4.ip_nonlocal_bind=1

    - name: gather server ip addresses
      setup:
        filter: ansible_default_ipv4.address

    - name: copy files haproxy.cfg
      template:
        src: haproxy.cfg.j2
        dest: "/etc/haproxy/haproxy.cfg"
      notify:
        - restart haproxy
      when: hostvars[groups['devservers'][0]]['ansible_default_ipv4'] is defined

    - name: install nginx, snmpd, snmp-mibs-downloader
      apt: 
        update_cache: true
        name: [ 'nginx', 'snmpd', 'snmp', 'snmp-mibs-downloader' ] 
        state: present

    - name: copy nginx config files
      template:
        src: nginx.cfg.j2
        dest: "/etc/nginx/nginx.cfg"

    - name: nginx start
      service:
        name: nginx
        state: restarted

    - name: copy snmpd cfg files
      template:
        src: snmpd.cfg.j2
        dest: "/etc/snmp/snmpd.cfg"

    - name: snmpd start
      service:
        name: snmpd
        state: restarted

    - name: Set virtual IPs
      set_fact:
        virtual_ips: "{{ lookup('file', 'vip_address') | regex_findall('([0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+)') }}"

    - name: Set node state and priority
      set_fact:
        node_state: "{{ 'MASTER' if inventory_hostname == groups['main_proxy'][0] else 'BACKUP' }}"
        node_priority: "{{ 101 if inventory_hostname == groups['main_proxy'][0] else 100 }}"

    - name: configure keepalived
      copy:
        content: |
          vrrp_instance VI_1 {
              state {{ node_state }}
              interface ens3
              virtual_router_id 51
              priority {{ node_priority }}
              advert_int 1

              authentication {
                  auth_type PASS
                  auth_pass 1234
              }

              virtual_ipaddress {
                  {{ virtual_ip }}
              }
          }
        dest: /etc/keepalived/keepalived.cfg
      vars:
        virtual_ip: "{{ virtual_ips[0] }}"
      notify:
        - restart keepalived

  handlers:
    - name: restart haproxy
      service:
        name: haproxy
        state: restarted

    - name: restart keepalived
      service:
        name: keepalived
        state: restarted

    - name: restart nginx
      service:
        name: nginx
        state: restarted

    - name: restart snmpd
      service:
        name: snmpd
        state: restarted

- hosts: devservers
  become: true
  tasks:
    - name: install pip
      apt:
        name: python3-pip
        state: present
    
    - name: install flask
      pip:
        executable: pip3
        name: flask
        state: present

    - name: install gunicorn
      pip:
        executable: pip3
        name: gunicorn
        state: present
    
    - name: verify flask installation
      command: pip3 show flask

    - name: verify gunicorn installation
      command: pip3 show gunicorn

    - name: createnew directory
      file:
        path: "/home/flask-app/"
        state: directory

    - name: copy service.py to devservers
      template:
        src: "service.py"
        dest: "/home/flask-app/app.py"

    - name: start flask app
      shell: |
        cd /home/flask-app/
        gunicorn --bind 0.0.0.0:5000 app:app&

    - name: install snmpd
      apt:
        name: snmpd
        state: present
    
    - name: copy snmpd cfg file
      template:
        src: snmpd.cfg.j2
        dest: "/etc/snmp/snmpd.cfg"

    - name: run snmpd
      service:
        name: snmpd
        state: restarted
